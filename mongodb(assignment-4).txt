PS D:\mongoclass> mongosh
Current Mongosh Log ID: 6729cdb6e8dda27dc946b798
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.2.5
Using MongoDB:          8.0.3
Using Mongosh:          2.2.5
mongosh 2.3.3 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-11-04T15:35:34.138+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> 
(To exit, press Ctrl+C again or Ctrl+D or type .exit)
test>
PS D:\mongoclass> show dbs
show : The term 'show' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the 
spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ show dbs
+ ~~~~
    + CategoryInfo          : ObjectNotFound: (show:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS D:\mongoclass> mongosh 
Current Mongosh Log ID: 6729cde646d1866f1f46b798
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.2.5
Using MongoDB:          8.0.3
Using Mongosh:          2.2.5
mongosh 2.3.3 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-11-04T15:35:34.138+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> show dbs
admin      40.00 KiB
config     72.00 KiB
ecommerce  88.00 KiB
local      72.00 KiB
sigma      56.00 KiB
test> use university
switched to db university
university> db.createCollection("students")
{ ok: 1 }
university> db.students.insertOne({"name":"SAM","roll":300})
{
  acknowledged: true,
  insertedId: ObjectId('6729cee746d1866f1f46b799')
}
university> db.students.find()
[
  { _id: ObjectId('6729cee746d1866f1f46b799'), name: 'SAM', roll: 300 }
]
university> db.students.insertMany({"name":"SAM","roll":300},{"name":"Ayushi","roll":400},{"name":"Ashmita","roll":500})     
MongoInvalidArgumentError: Argument "docs" must be an array of documents
university> db.students.insertMany([{"name":"SAM","roll":300},{"name":"Ayushi","roll":400},{"name":"Ashmita","roll":500}])   
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6729d03346d1866f1f46b79a'),
    '1': ObjectId('6729d03346d1866f1f46b79b'),
    '2': ObjectId('6729d03346d1866f1f46b79c')
  }
}
university> db.students.find()
[
  { _id: ObjectId('6729cee746d1866f1f46b799'), name: 'SAM', roll: 300 },
  { _id: ObjectId('6729d03346d1866f1f46b79a'), name: 'SAM', roll: 300 },
  {
    _id: ObjectId('6729d03346d1866f1f46b79b'),
    name: 'Ayushi',
    roll: 400
  },
  {
    _id: ObjectId('6729d03346d1866f1f46b79c'),
    name: 'Ashmita',
    roll: 500
  }
]
university> db.students.find().sort()
[
  { _id: ObjectId('6729cee746d1866f1f46b799'), name: 'SAM', roll: 300 },
  { _id: ObjectId('6729d03346d1866f1f46b79a'), name: 'SAM', roll: 300 },
  {
    _id: ObjectId('6729d03346d1866f1f46b79b'),
    name: 'Ayushi',
    roll: 400
  },
  {
    _id: ObjectId('6729d03346d1866f1f46b79c'),
    name: 'Ashmita',
    roll: 500
  }
]
university> db.students.find().sort({"name":1})
[
  {
    _id: ObjectId('6729d03346d1866f1f46b79c'),
    name: 'Ashmita',
    roll: 500
  },
  {
    _id: ObjectId('6729d03346d1866f1f46b79b'),
    name: 'Ayushi',
    roll: 400
  },
  { _id: ObjectId('6729cee746d1866f1f46b799'), name: 'SAM', roll: 300 },
  { _id: ObjectId('6729d03346d1866f1f46b79a'), name: 'SAM', roll: 300 }
]
university> db.students.find().sort({"name":-1})
[
  { _id: ObjectId('6729cee746d1866f1f46b799'), name: 'SAM', roll: 300 },
  { _id: ObjectId('6729d03346d1866f1f46b79a'), name: 'SAM', roll: 300 },
  {
    _id: ObjectId('6729d03346d1866f1f46b79b'),
    name: 'Ayushi',
    roll: 400
  },
  {
    _id: ObjectId('6729d03346d1866f1f46b79c'),
    name: 'Ashmita',
    roll: 500
  }
]
university> db.students.find().sort({"name":1}).limit(2)
[
  {
    _id: ObjectId('6729d03346d1866f1f46b79c'),
    name: 'Ashmita',
    roll: 500
  },
  {
    _id: ObjectId('6729d03346d1866f1f46b79b'),
    name: 'Ayushi',
    roll: 400
  }
]
university> db.students.find({}.{"name":true})
Uncaught:
SyntaxError: Unexpected token (1:20)

> 1 | db.students.find({}.{"name":true})
    |                     ^
  2 |

university> db.students.find({},{"name":true})
[
  { _id: ObjectId('6729cee746d1866f1f46b799'), name: 'SAM' },
  { _id: ObjectId('6729d03346d1866f1f46b79a'), name: 'SAM' },
  { _id: ObjectId('6729d03346d1866f1f46b79b'), name: 'Ayushi' },
  { _id: ObjectId('6729d03346d1866f1f46b79c'), name: 'Ashmita' }
]
university> show dbs
admin        40.00 KiB
config      108.00 KiB
ecommerce    88.00 KiB
local        72.00 KiB
sigma        56.00 KiB
university   72.00 KiB
university> use students
switched to db students
students> db.students.insertMany([{"name":"av","age":19,"grade":10},{"name":"ayu","age":16,"grade":10},{"name":"ash","age":15,"grade":9}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6729d8a346d1866f1f46b79d'),
    '1': ObjectId('6729d8a346d1866f1f46b79e'),
    '2': ObjectId('6729d8a346d1866f1f46b79f')
  }
}
students> db.students.find({},{"name":true})
[
  { _id: ObjectId('6729d8a346d1866f1f46b79d'), name: 'av' },
  { _id: ObjectId('6729d8a346d1866f1f46b79e'), name: 'ayu' },
  { _id: ObjectId('6729d8a346d1866f1f46b79f'), name: 'ash' }
]
students> db.students.find()
[
  {
    _id: ObjectId('6729d8a346d1866f1f46b79d'),
    name: 'av',
    age: 19,
    grade: 10
  },
  {
    _id: ObjectId('6729d8a346d1866f1f46b79e'),
    name: 'ayu',
    age: 16,
    grade: 10
  },
  {
    _id: ObjectId('6729d8a346d1866f1f46b79f'),
    name: 'ash',
    age: 15,
    grade: 9
  }
]
students> db.students.find({},{"age":{$gt:18}})
MongoServerError[Location16020]: Expression $gt takes exactly 2 arguments. 1 were passed in.
students> db.students.find({},{"age":{$gt:18}})
MongoServerError[Location16020]: Expression $gt takes exactly 2 arguments. 1 were passed in.
students> db.students.find({},{age:{$gt:18}})
MongoServerError[Location16020]: Expression $gt takes exactly 2 arguments. 1 were passed in.
students> db.students.find({age:{$gt:18}})
[
  {
    _id: ObjectId('6729d8a346d1866f1f46b79d'),
    name: 'av',
    age: 19,
    grade: 10
  }
]
students> db.students.updateOne({"name":"av"},{$set:{"grade":9}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
students> db.students.find()
[
  {
    _id: ObjectId('6729d8a346d1866f1f46b79d'),
    name: 'av',
    age: 19,
    grade: 9
  },
  {
    _id: ObjectId('6729d8a346d1866f1f46b79e'),
    name: 'ayu',
    age: 16,
    grade: 10
  },
  {
    _id: ObjectId('6729d8a346d1866f1f46b79f'),
    name: 'ash',
    age: 15,
    grade: 9
  }
]
students> db.students.deleteOne({"name":"av"})
{ acknowledged: true, deletedCount: 1 }
students> db.students.find()
[
  {
    _id: ObjectId('6729d8a346d1866f1f46b79e'),
    name: 'ayu',
    age: 16,
    grade: 10
  },
  {
    _id: ObjectId('6729d8a346d1866f1f46b79f'),
    name: 'ash',
    age: 15,
    grade: 9
  }
]
students> db.students.insertOne({"name":"SAM","age":18,"grade":11})
{
  acknowledged: true,
  insertedId: ObjectId('6729def546d1866f1f46b7a0')
}
students> db.students.find()
[
  {
    _id: ObjectId('6729d8a346d1866f1f46b79e'),
    name: 'ayu',
    age: 16,
    grade: 10
  },
  {
    _id: ObjectId('6729d8a346d1866f1f46b79f'),
    name: 'ash',
    age: 15,
    grade: 9
  },
  {
    _id: ObjectId('6729def546d1866f1f46b7a0'),
    name: 'SAM',
    age: 18,
    grade: 11
  }
]
students> db.students.insertOne({"name":"RAM","age":18,"grade":11})
{
  acknowledged: true,
  insertedId: ObjectId('6729e47746d1866f1f46b7a1')
}
students> db.students.countDocuments({ grade: 11 })
2
students> db.students.find({}, { name: 1, grade: 1, _id: 0 })
[
  { name: 'ayu', grade: 10 },
  { name: 'ash', grade: 9 },
  { name: 'SAM', grade: 11 },
  { name: 'RAM', grade: 11 }
]
students> db.students.find().sort({ age: -1 })
[
  {
    _id: ObjectId('6729def546d1866f1f46b7a0'),
    name: 'SAM',
    age: 18,
    grade: 11
  },
  {
    _id: ObjectId('6729e47746d1866f1f46b7a1'),
    name: 'RAM',
    age: 18,
    grade: 11
  },
  {
    _id: ObjectId('6729d8a346d1866f1f46b79e'),
    name: 'ayu',
    age: 16,
    grade: 10
  },
  {
    _id: ObjectId('6729d8a346d1866f1f46b79f'),
    name: 'ash',
    age: 15,
    grade: 9
  }
]
students>